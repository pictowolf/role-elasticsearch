---
- name: Set es_http_scheme to HTTP
  ansible.builtin.set_fact:
    es_http_scheme: http
  when: not es_tls_enabled

- name: Set es_http_scheme to HTTPS
  ansible.builtin.set_fact:
    es_http_scheme: https
  when: es_tls_enabled

- name: Ensure Elastic is present
  ansible.builtin.service:
    name: elasticsearch
    state: started

- name: Ensure Elastic is running
  ansible.builtin.wait_for:
    host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    port: 9200
    delay: 5

- name: Check if upgraded version is already installed
  ansible.builtin.package:
    list: "elasticsearch-{{ es_major_version }}.{{ es_minor_version }}.x86_64"
  register: installed_es_version


- name: Perform upgrade process
  block:
    - name: Disable shard allocation
      ansible.builtin.uri:
        url: "{{ es_http_scheme }}://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:9200/_cluster/settings"
        body: '{"persistent":{"cluster.routing.allocation.enable":"primaries"}}' # specify no shard allocation
        user: elastic
        password: "{{ es_bootstrap_password }}"
        force_basic_auth: yes
        body_format: json
        method: PUT
        validate_certs: false

    - name: Stop non essential indexing to speed up shard recovery
      ansible.builtin.uri:
        url: "{{ es_http_scheme }}://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:9200/_flush/synced"
        method: POST
        user: elastic
        password: "{{ es_bootstrap_password }}"
        force_basic_auth: yes
        validate_certs: false

    - name: Get cluster ID
      ansible.builtin.uri:
        url: "{{ es_http_scheme }}://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:9200"
        user: elastic
        password: "{{ es_bootstrap_password }}"
        force_basic_auth: yes
        validate_certs: false
      register: pre_upgrade_cluster_info

    - name: Stop Elastic
      ansible.builtin.service:
        name: elasticsearch
        state: stopped

    - name: Upgrade Elastic
      ansible.builtin.package:
        name: "elasticsearch-{{ es_major_version }}.{{ es_minor_version }}.x86_64"
        state: present

    - name: Start Elastic
      ansible.builtin.service:
        name: elasticsearch
        state: started

    - name: Ensure Elastic instance is working
      ansible.builtin.uri:
        url: "{{ es_http_scheme }}://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:9200"
        status_code: 200
        user: elastic
        password: "{{ es_bootstrap_password }}"
        force_basic_auth: yes
        validate_certs: false
      retries: 3
      delay: 10

    - name: Validate instance joins the cluster
      ansible.builtin.uri:
        url: "{{ es_http_scheme }}://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:9200"
        user: elastic
        password: "{{ es_bootstrap_password }}"
        force_basic_auth: yes
        validate_certs: false
      register: post_upgrade_cluster_info
      until: pre_upgrade_cluster_info.json.cluster_uuid == post_upgrade_cluster_info.json.cluster_uuid
      retries: 3
      delay: 10

    - name: Enable shard allocation
      ansible.builtin.uri: 
        url: "{{ es_http_scheme }}://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:9200/_cluster/settings"
        body: '{"persistent":{"cluster.routing.allocation.enable":null}}'
        user: elastic
        password: "{{ es_bootstrap_password }}"
        force_basic_auth: yes
        validate_certs: false 
        body_format: json
        method: PUT

    - name: Wait for Elastic to recover
      ansible.builtin.uri:
        url: "{{ es_http_scheme }}://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:9200/_cat/health"
        user: elastic
        password: "{{ es_bootstrap_password }}"
        force_basic_auth: yes
        validate_certs: false
        method: GET
        return_content: yes
        status_code: 200
      register: result
      until: result | regex_search('green')
      retries: 10
      delay: 30
  when: installed_es_version.results | selectattr("yumstate", "equalto", "installed") | list | length 0
